//****


You have an empty sequence, and you will be given NN queries. Each query is one of these three types:

1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.

Input Format

The first line of input contains an integer, NN. The next NN lines each contain an above mentioned query. (It is guaranteed that each query is valid.)

Constraints
1≤N≤1051≤N≤105
1≤x≤1091≤x≤109
1≤type≤31≤type≤3

Output Format

For each type 33 query, print the maximum element in the stack on a new line.

Sample Input

10
1 97
2
1 20
2
1 26
1 20
2
3
1 91
3

Sample Output

26
91

**//



//Solution

import java.io.*;
import java.util.*;

public class Solution {
    
    Stack<Integer> mainStack=new Stack<Integer>();
    Stack<Integer> maxstack = new Stack<Integer>();
    
    public void push(Integer item){
        mainStack.push(item);
        Integer max;
        if(maxstack.isEmpty()){
            maxstack.push(item);
        }
        else{
            max=item>maxstack.peek()?item:maxstack.peek();
            maxstack.push(max);
        }
    }
    public void pop(){
        mainStack.pop();
        maxstack.pop();
    }
    public Integer getMaximum(){
        return maxstack.peek();
    }
    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        
        
        Solution obj = new Solution();
        Scanner input = new Scanner(System.in);
        
        int n = input.nextInt();
        for(int i=0;i<n;i++){
            int choice = input.nextInt();
            if(choice==1){
                Integer item=input.nextInt();
                obj.push(item);           
            }
            else if(choice==2){
                obj.pop();
            }
            else if(choice == 3){
                System.out.println(obj.getMaximum());
            }
        }
        
    }
}

