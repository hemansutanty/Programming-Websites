//**

Problem Statement

Sorting 
One common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms.

Insertion Sort 
These challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with an already sorted list.

Insert element into sorted list 
Given a sorted list with an unsorted number e in the rightmost cell, can you write some simple code to insert e into the array so that it remains sorted?

Print the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort.

Guideline: You can copy the value of e to a variable and consider its cell "empty". Since this leaves an extra cell empty on the right, you can shift everything over until V can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace it with e.

Input Format 
There will be two lines of input:

Size - the size of the array
Arr - the unsorted array of integers
Output Format 
On each line, output the entire array every time an item is shifted in it.

Constraints 
1≤Size≤1000 
−10000≤e≤10000,e∈Arr

Sample Input

5
2 4 6 8 3
Sample Output

2 4 6 8 8 
2 4 6 6 8 
2 4 4 6 8 
2 3 4 6 8 
Explanation

3 is removed from the end of the array.
In the 1st line 8>3, so 8 is shifted one cell to the right. 
In the 2nd line 6>3, so 6 is shifted one cell to the right. 
In the 3rd line 4>3, so 4 is shifted one cell to the right. 
In the 4th line 2<3, so 3 is placed at position 2.

Task

Complete the method insertionSort which takes in one parameter:

Arr - an array with the value e in the right-most cell.
Next Challenge

In the next Challenge, we will complete the insertion sort itself!

**//

//Solution

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <assert.h>
void print(int ar_size, int * ar){
    int i;
    for(i=0;i<ar_size;i++){
        printf("%d ",ar[i]);
    }
    printf("\n");
}
void insertionSort(int ar_size, int *  ar) {
    int i,j,v;
    for(i=2;i<ar_size;i++){
        v=ar[i];
        j=i;
        while(ar[j-1]>v&&j>=1){
            ar[j]=ar[j-1];
            print(ar_size,ar);
            j--;
        }
        ar[j]=v;
    }
    print(ar_size,ar);
}
int main(void) {
   
   int _ar_size;
    scanf("%d", &_ar_size);
    int _ar[_ar_size], _ar_i;
    for(_ar_i = 0; _ar_i < _ar_size; _ar_i++) { 
   scanf("%d", &_ar[_ar_i]); 
}

insertionSort(_ar_size, _ar);
   
   return 0;
}
